<!--//version:12-->
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<script type="text/javascript">

var n = null, img = "img", iframe = "iframe", js = "js",
Demdex = {
	DEMDEX_NET: ".demdex.net",
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
	cbmacros : ["%timestamp%","%rnd%", "%did%"],
	utl : {},
	segs : [],
	segdefs : [],
	blown : [],
	dexlc : "",
	procd : {js:[], img:[], iframe:[], unknown:[] },
	demdexSubmit: function(aStr) {
	   var img = new Image(0,0);
	   img.onload=function() { }
	   img.src=aStr
	},
	isTargetable: function() {
		var retval=true;
		var ck=Demdex.getCookie('demdex');
		var dlc=Demdex.getCookie('DexLifeCycle');
		if(ck && ck.match(/dv2:jY0wRKU\/M28\/lvlLHbINBA==/)) { retval=false; }
		if(dlc && dlc.match(/^NOTARGET/)) { retval=false; }
		return retval;
	},
	callOut: function(obj, map) {
		if(this.canSetCookie()) {
			var cookiePresent=false,
			dataPresent=false,
			dataValid=false,
			ck=this.getCookie("dextp"),
			data = [],
			providerCode = obj.providerCode,
			ttl = map[providerCode + 'validttl'];
	
			var did=this.getCookie("demdex");
			if(!did) return;

			if(did.match(/^DID:/) || did.match(/^NOTARGET:/)) return;

				
			if(ck){
				cookiePresent=true;
				data=ck.split("|");
				var tinfo="";
				for(var i=0; i < data.length; i++) {
					tinfo=data[i];
					if(tinfo.match("^" + providerCode + "-")) {
						dataPresent=true;
						var parts=tinfo.split("-");
						var tstamp=parts[1];
						var d=new Date();
						var now=new Date();
						d.setTime(tstamp);

						if((now-d.getTime()) < (ttl*1000*60)) dataValid=true;
						else data.splice(i, 1);
						break;
					}
				}
			}

			if(!(cookiePresent && dataPresent && dataValid)) {
				if(obj.t=="img") {
					var protocol = document.location.protocol == 'https:'? 'https:':'http:',
					imgs = [],
					srcs = obj.srcs,
					j = srcs.length;
					
					while(j--)
					{
						imgs[j] = new Image(0,0);
						imgs[j].onload=imgs[j].onerror=imgs[j].onabort=function(){ }
						imgs[j].src=protocol + srcs[j];
					}
				} else if(obj.t == "js") {
					var protocol = document.location.protocol == 'https:'? 'https:':'http:',
					scripts = [],
					srcs = obj.srcs,
					j = srcs.length;
					while(j--)
					{
						scripts[j] = document.createElement('script');
						scripts[j].type='text/javascript';
					        scripts[j].src=srcs[j];
                       				var _h=document.getElementsByTagName('script')[0];
                       				_h.parentNode.insertBefore(scripts[j], _h);
					}
				}
			}
			if(!cookiePresent) { 
				this.setCookie("dextp", providerCode + "-"+(new Date()).getTime(), 8640000, "/", ".demdex.net", false); 
			}
			else if((!dataPresent) || (!dataValid)) { 
				data.push(providerCode + "-"+(new Date()).getTime());
				this.setCookie("dextp", data.join("|"), 8640000, "/", ".demdex.net", false);
			}

		} 
	},
	nexacdpm: function(ttl) {
		if(!this.getCookie("nexac") && this.canSetCookie()) {
			var iframe=document.createElement('IFRAME');
			iframe.setAttribute("style", "display:none");
			iframe.setAttribute("width", "0");
			iframe.setAttribute("height", "0");
			iframe.setAttribute("id", "dlciframe");
			iframe.setAttribute('src', document.location.protocol+ "//r.nexac.com/e/getdata.xgi?dt=br&pkey=cmet59prscq84&ru="+encodeURIComponent(document.location.protocol+"//nexac.demdex.net/nexac.html?na_da:<na_da>"));
			document.body.appendChild(iframe);
			this.setCookie('nexac', '1', ttl, "/", '.demdex.net', false);
		} 

	},
	bizodpm: function(ttl) {
		if(!this.getCookie("bizo") && this.canSetCookie()) {
			this.utl['bizovalidttl']=ttl;
			var script= document.createElement("script");
			script.type="text/javascript";
			if("https:" == document.location.protocol) {
				script.setAttribute("src", "https://api.bizographics.com/v1/profile.json?api_key=6332f8b7316a4d1284e9c1217a367347&callback=Demdex.parseBizo");
			} else {
				script.setAttribute("src", "http://api.bizographics.com/v1/profile.json?api_key=6332f8b7316a4d1284e9c1217a367347&callback=Demdex.parseBizo");
			}
			script.onload=script.onreadystatechange = function() { };
			var _h=document.getElementsByTagName('script')[0];
			_h.parentNode.insertBefore(script, _h);
		} 

	},
 	replaceMacro: function(macro){
                var cookie;

                if(macro=="%rnd%") return  ""+(new Date()).getTime();
                if(macro=="%timestamp%") return  ""+(new Date()).getTime();
                if(macro=="%did%") {
                        cookie = this.getCookie('demdex');
                        if (cookie) {
                                return cookie.replace(/==/g,'').replace(/:/,'-');
                        }
                }

                return macro;
        },
	canSetCookie: function() {
		var csc=false;
		if(navigator.cookieEnabled) {
			var ck=this.getCookie("demdex");
			if(!ck) {
				 this.setCookie("_dp","1",1,"/",this.DEMDEX_NET, false);
				ck=this.getCookie("_dp");
			}
			if(ck) csc=true;
		}
		return csc;
	},
	parseBizo:function(json) {
		try {
			var ttl=Demdex.utl['bizovalidttl'];
			var vstr="";
			bg=json.bizographics;
			if(bg.company_size) { 
				 vstr+="company_size="+bg.company_size.code;
			}
			if(bg.seniority) { 
				 vstr+="&seniority="+bg.seniority.code;
			}
			if(bg.location) {
				vstr+="&location="+bg.location.code;
			}
			if(bg.education) {
				vstr+="&education="+bg.education.code;
			}
			if(bg.gender) {
				vstr+="&gender="+bg.gender.code;
			}
			if(bg.group) {
				vstr+="&group="+bg.group.code;
			}
			if(bg.functional_area) {
				 if(bg.functional_area.length!=null) {
					for(i=0; i < bg.functional_area.length; i++) {
						vstr+="&functional_area="+bg.functional_area[i].code;
					}
				}
				else  { 
					vstr+="&functional_area="+bg.functional_area.code;
				}
			}
			//industry -multivalued
			if(bg.industry) {
				if(bg.industry.length!=null) {
					for(i=0; i < bg.industry.length; i++) {
						vstr+="&industry="+bg.industry[i].code;
					}
				}
				else  {
					vstr+="&industry="+bg.industry.code;
				}
			}


			this.setCookie("bizo", "1", ttl, "/", this.DEMDEX_NET, false);
			if(vstr!="") this.demdexSubmit(document.location.protocol+"//dpm.demdex.net/demdot.jpg?et:dpm|dpid:22|data:"+vstr);
		}catch(Err) { }
		
	
	},
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = Demdex._utf8_encode(input);
 
		while (i < input.length) {
 
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
 
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
 
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
 
			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
		}
 
		return output;
	},
 
	// public method for decoding
	decode64 : function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
		while (i < input.length) {
 
			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));
 
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
 
			output = output + String.fromCharCode(chr1);
 
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
 
		}
 
		output = Demdex._utf8_decode(output);
 
		return output;
 
	},
 
	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
 
		for (var n = 0; n < string.length; n++) {
 
			var c = string.charCodeAt(n);
 
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
 
		}
 
		return utftext;
	},
 
	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
 
		while ( i < utftext.length ) {
 
			c = utftext.charCodeAt(i);
 
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
 
		}
 
		return string;
	},
	 getCookie: function(name) {
            var sPos = document.cookie.indexOf(name + "=");
            var len = sPos + name.length + 1;
            if((!sPos) && (name != document.cookie.substring(0, name.length))){
                return null;
            }
            if(sPos == -1){
                return null;
            }
            var ePos = document.cookie.indexOf(';', len);
            if(ePos == -1) ePos = document.cookie.length;
            return unescape(document.cookie.substring(len, ePos));
        },

	setCookie: function(name, value, expires, path, domain, secure){
            var today = new Date();
            if(expires){
                expires = expires * 1000 * 60;
            }
            document.cookie = name+'='+value +
                ((expires) ? ';expires=' + new Date(today.getTime() + expires).toGMTString() : '') +
                ((path) ? ';path=' + path : '') +
                ((domain) ? ';domain=' + domain : '') +
                ((secure) ? ';secure' : '');
        }, 

        publishCode: function(ptype, code, scode){

		if(document.location.protocol=="http:") { if(code==null) return; }
		if(document.location.protocol=="https:") { if(scode==null) return; }
		
		//explode macros
		for(var i=0; i < this.cbmacros.length; i++) {
			var _m=this.cbmacros[i];
			if(document.location.protocol=="http:") { if(code.indexOf(_m)) code=code.replace(_m, this.replaceMacro(_m)); }
			if(document.location.protocol=="https:") { if(scode.indexOf(_m)) scode=scode.replace(_m, this.replaceMacro(_m)); }
		}

		if(ptype=="img"){
			//pixel
			if(document.location.protocol=="http:") {
				setTimeout(function() { var _gmi = new Image(0,0); _gmi.src=code; }, 0);
			}
			else {
				setTimeout(function() { var _gmi = new Image(0,0); _gmi.src=scode; }, 0);
			}
		}else if(ptype=="js") {
			//javascuipt
			var aDiv=document.createElement("div");
			aDiv.style.display="none";
			var script = document.createElement('script');
			script.setAttribute('type', 'text\/javascript');
			if(document.location.protocol=="http:") script.setAttribute('src', code);
			else script.setAttribute('src', scode);
			script.onload = script.onreadystatechange =  function() {  };
			aDiv.appendChild(script);
			document.body.appendChild(aDiv);
		} else if(ptype=="iframe") {
			//iframe
			var iframe=document.createElement('IFRAME');
			iframe.setAttribute("style", "display:none");
			iframe.setAttribute("width", "0");
			iframe.setAttribute("height", "0");
			iframe.setAttribute("id", "ddiframe");
			if(document.location.protocol=="http:") iframe.setAttribute('src', code);
			else iframe.setAttribute('src', scode);
			document.body.appendChild(iframe);
		}

		if(document.location.protocol=="https:") { this.procd[ptype].push(scode); }
		else { this.procd[ptype].push(code); }

        },

	parseQueryString: function(_qs) {
		var map={};
		if(_qs) {
			_qs=_qs.substring(1);
			var arr= _qs.split("&");
			for(var i=0; i < arr.length; i++) {
				if(arr[i].split('=').length!=2) continue;
				var srac=arr[i].split('=')[0];
				var srval=arr[i].split('=')[1];
				map[srac]=srval;
			}
		}
		return map;
        },

	main: function() {
		try {
			var dlc=this.getCookie('DexLifeCycle'),
			_qs=document.location.search.toString(),
			map=this.parseQueryString(_qs),
			callOutData;

			if(!dlc) dlc="";
			
			if(!this.isTargetable()) return;

			setTimeout(function() { Demdex.dpmsNSyncs(7,map); }, 10);
			setTimeout(function() { Demdex.checkForChange(11,dlc); }, 100);
		}catch(Err) { }

	},

	dpmsNSyncs: function(ttl, map) {
		try {
			ttl=ttl-1;
			if((ttl >0) && (!Demdex.getCookie('demdex'))) {
				setTimeout(function() { Demdex.dpmsNSyncs(ttl,map); }, 200);
				return;
			}

			if(!Demdex.getCookie('demdex')) return;

			var did = this.replaceMacro('%did%'),
				proto = document.location.protocol;
			if(map['bizo']) { this.bizodpm(map['bizovalidttl']); } //bizo
			if(map['nexac']) { this.nexacdpm(map['nexacvalidttl']); } //DLX
			if(map['targus'])
			{
				callOutData = 
				{
					t:'js',
					providerCode: 'targus',
					srcs: ['//adadvisor.net/adscores/g.json?sid=9233633946']
				};			 
				this.callOut(callOutData, map);
			}
			if(map['is_mediamath'])
			{
				callOutData = 
				{
					t:'img',
					providerCode: 'mm',
					srcs: ['//sync.mathtag.com/sync/img?mt_exid=10004&mt_exuid=' + did + '&redir='+ proto +'%2F%2Fdpm.demdex.net%2Fibs%3Adpid%3D269%26dpuuid%3D[MM_UUID]%26ddsuuid%3d'+did]
				};			 
				this.callOut(callOutData, map);
			}
			if(map['is_invitemedia'])
			{
				callOutData = 
				{
					t:'img',
					providerCode: 'im',
					srcs: ['//va.px.invitemedia.com/set_partner_uid?partnerID=48&partnerUID=' + did + '&sscs_active=1', '//dpm.demdex.net/ibs:dpid=282&ddsuuid='+did, '//eu.px.invitemedia.com/set_partner_uid?partnerID=48&partnerUID=' + did + '&sscs_active=1']
				};
				this.callOut(callOutData, map);
			}
			if(map['is_exelate'])
			{
				callOutData = 
				{
					t:'img',
					providerCode: 'ex',
					srcs: ['//load.exelator.com/load/?p=104&g=240&j=r&buid=' + did]
				};
				this.callOut(callOutData, map);
			}
			if(map['is_tg'])
			{
				callOutData = 
				{
					t:'img',
					providerCode: 'tg',
					srcs: ['//adadvisor.net/adscores/g.pixel?sid=9211132908']
				};
				this.callOut(callOutData, map);
			}
		}catch(Err) { }
	},

	checkForChange: function(ttl, dlc) {
		var _dlc=this.getCookie('DexLifeCycle');
		if(!_dlc) _dlc="";
		if(dlc!=_dlc) return Demdex.processDestinations(ttl);
		if(ttl==0) return Demdex.processDestinations(ttl);
		ttl=ttl-1;
		setTimeout(function() { Demdex.checkForChange(ttl,dlc); }, 100);
	},

	get_split: function(ck) {
		var parts=ck.split("|");
		var dpub_info=this.decode64(parts[6]);
		var fields= dpub_info.split(",");
		var traitarray = [];
		var segarray = [];
		
		for(x=0; x < fields.length; x++) {
			if(fields[x].match("-0") || fields[x].match("-2")) traitarray[traitarray.length]=fields[x];
			else if(fields[x].match("-1") || fields[x].match("-3")) segarray[segarray.length]=fields[x];
		}
		return [parts, dpub_info, fields, traitarray, segarray];
	},

	processDestinations: function(ttl) {
		var ck=this.getCookie('DexLifeCycle');
		if(!ck) {
			return;
		}

		this.dexlc=ck;

		var segs = this.segs,
		seg,
		newSegs = [],
		z=Demdex.get_split(ck),
		zl,
		parts=z[0], dpub_info=z[1], fields=z[2], traitarray=z[3], segarray=z[4],
		trait, traittype, ptype, code, scode,
		tmpblown=[],
		serialDest = this.serialDest,
		serialD,
		serialHash = {},
		serialSegs = [],
		processedSerialSegs = [],
		dVal,
		isHttps = document.location.protocol == 'https:',
		joined,
		substitute = /%SUBSTITUTE%/,
		w,
		wl,
		processTraitType = function(propArray, traitA, traitB, self, serial) {
			var vKey, ap, y, yl, x, xl, a, al, returnValue = false;
			for(y=0, yl=propArray.length; y < yl; y++) {
				vKey = propArray[y];
				if(vKey.match("^"+trait+traitA) || vKey.match("^"+trait+traitB)) {
					 ap=false;
					 for(a=0, al=self.blown.length; a< al; a++) {
						if(self.blown[a]==vKey) {
							 ap=true;
							 break;
						}
					 }
					 if(ap) {
						 continue;
					 }
					 returnValue = true;
					 if (!serial) {
					 	self.publishCode(ptype, code, scode);
					 }
					 tmpblown.push(vKey);
					 for(x=0, xl=fields.length; x < xl; x++) {
						if(vKey==fields[x]) {
							fields.splice(x,1);
							break;
						}
					 }
				}
			}
			return returnValue;
		},
		iterateTraitTypes = function(segsArr, self, serial) {
			var z,
			zl,
			returnValue,
			seg;
			
			segs = segsArr;
			
			for(z=0, zl = segs.length; z < zl; z++) {
				seg = segs[z];
				trait=seg.s;
				traittype=seg.t;
				ptype=seg.y;
				code=seg.c;
				scode=seg.e;
				
				returnValue = false;
	
				if((traittype==3) || (traittype==10)) {
					returnValue = processTraitType(traitarray, '-0', '-2', self, serial);
				}
				else if(traittype==5) {
					returnValue = processTraitType(segarray, '-1', '-3', self, serial);
				}
				if (serial && returnValue) {
					processedSerialSegs.push(seg);
				}
			}
		};

		if (serialDest && serialDest instanceof Array && serialDest.length) {
			for (w = 0, wl = serialDest.length; w < wl; w++) {
				serialD = serialDest[w];
				dVal = serialD.d;
				if (typeof dVal != 'undefined' && dVal != null) {
					serialHash[dVal] = serialD;
				}
			}
			
			for (z=0, zl = segs.length; z < zl; z++) {
				seg = segs[z];
				dVal = seg.d;
				if (typeof dVal != 'undefined' && dVal != null && (serialD = serialHash[dVal]) && dVal == serialD.d) {
					serialSegs.push(seg);
				}
				else
				{
					newSegs.push(seg);
				}
			}
			
			iterateTraitTypes(newSegs, this);
			iterateTraitTypes(serialSegs, this, true);
	
			serialSegs = [];

			for (z=0, zl = processedSerialSegs.length; z < zl; z++) {
				seg = processedSerialSegs[z];
				dVal = seg.d;
				if (typeof dVal != 'undefined' && dVal != null && (serialD = serialHash[dVal]) && dVal == serialD.d) {
					if (!serialSegs[dVal]) {
						serialSegs[dVal] = [];
					}
					serialSegs[dVal].push(isHttps? seg.e:seg.c);
				}
			}

			for (dVal in serialHash) {
			  if (serialHash.hasOwnProperty(dVal)) {
				  serialD = serialHash[dVal];
				  seg = serialSegs[dVal];
				  if (seg) {
					  joined = seg.join(serialD.l);
					  this.publishCode(serialD.y, serialD.bc? serialD.bc.replace(substitute, joined):null, serialD.be? serialD.be.replace(substitute, joined):null);
				  }
			  }
			}			
		}

		this.blown.push(tmpblown);

		if(ttl==0) {
			//flush dpub_info from LifeCycle

			
			for(var x=0; x < this.blown.length; x++) {
				var key=this.blown[x];
				for(var i=0; i < fields.length; i++) {
					if(fields[i] == key) {
						fields.splice(i, 1);
					}
				}
			}

			if(fields.length==0) fields.push(0);
			dpub_info=fields.join(",");

			parts[6]=this.encode(dpub_info);

			ck=parts.join("|");
			var dom = document.domain.toString();
			if(dom && dom.split(".") && (dom.split(".").length > 3)) dom=dom.substring(dom.indexOf("."));
			if(ck) this.setCookie("DexLifeCycle", ck, "144000", "/", dom, false);
		} else {
			ttl=ttl-1;
			setTimeout(function() { Demdex.checkForChange(ttl,ck); }, 100);
		}
	}
};

var Targus={
 parseInfo:function(json) {
                try {
			var strList=[];
                        for(key in json.targus) {
				if((key=="segment")|| (key=="gender")) {
					strList.push(key+"="+json.targus[key]);	
				}
                        }
			str=strList.join("&");
			str=str.replace(/segment=/i, 'seg=').replace(/gender=/i, 'gen=');

			if(!str.match(/seg=000/i)) {
				var img= new Image(0,0);
				img.src="//dpm.demdex.net/demdot.jpg?et:dpm|dpid:21|data:"+str.toLowerCase();
			}

                }catch(Err) { }
        }
};

Demdex.serialDest = [];
Demdex.serialDest.push({d:'365', bc:'http://segments.adap.tv/data/?p=demdex&type=gif&segid=%SUBSTITUTE%&add=true', be:'https://segments.adap.tv/data/?p=demdex&type=gif&segid=%SUBSTITUTE%&add=true', l:',',  y:img},{d:'334', bc:'http://pc1.yumenetworks.com/dynamic_gn_OLYIAZtO_%rnd%?%SUBSTITUTE%', be:'https://pc1.yumenetworks.com/dynamic_gn_OLYIAZtO_%rnd%?%SUBSTITUTE%', l:'&',  y:img}, {d:'453', bc:'http://segs.btrll.com/v1/tpix/-/-/-/-/-/%SUBSTITUTE%', be:'https://segs.btrll.com/v1/tpix/-/-/-/-/-/%SUBSTITUTE%', l:'/', y:img}, {d:'468', bc:'http://segments.adap.tv/data/?p=demand&type=gif&segid=%SUBSTITUTE%&add=true', be:'https://segments.adap.tv/data/?p=demand&type=gif&segid=%SUBSTITUTE%&add=true', l:',',  y:img});






</script>

</head>
<body onload="setTimeout('Demdex.main()', 100);">


</body></html>